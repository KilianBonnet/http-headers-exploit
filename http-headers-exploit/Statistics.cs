using System.Net;
using System.Net.Http.Headers;

namespace http_headers_exploit;

public class Statistics
{
    // Mandatory requirements
    private readonly Dictionary<string, int> servers;               // Question 1 : Web server
    private readonly List<TimeSpan> ages;                           // Question 2 : Page Age

    // Other statistics
    private readonly Dictionary<int, int> statusCodes;
    private readonly HashSet<string> timeoutUrl;
    private readonly List<TimeSpan> cookieMaxAge;
    private int siteCount = 0;


    public Statistics() {
        servers = new();
        ages = new();
        statusCodes = new();
        timeoutUrl = new();
        cookieMaxAge = new();
    }

    public void AddStatistic(HttpResponseMessage response) {
        AddToMap(statusCodes,(int) response.StatusCode);                    // Adding HTTP status code
        HttpResponseHeaders headers = response.Headers;                     // Retiring HTTP headers

        // Mandatory requirements
        if(headers.Age.HasValue) ages.Add(headers.Age.Value);               // Adding Age
        if(headers.Server.ToString() != "") 
            AddToMap(servers, headers.Server.ToString().Split('/')[0]);     // Adding Server (removing /version)
        siteCount++;
        if(headers.CacheControl != null && headers.CacheControl.MaxAge.HasValue)
            cookieMaxAge.Add(headers.CacheControl.MaxAge.Value);            // Adding MaxAge
    }

    internal void AddTimeout(string url)
    {
        timeoutUrl.Add(url);
        siteCount++;
    }
    
    private void AddToMap<T>(Dictionary<T, int> map, T element) where T : notnull
    {
        if (map.ContainsKey(element)) map[element] += 1;
        else map[element] = 1;
    }

    private int CountElements<T>(Dictionary<T, int> map) where T : notnull
    {
        int count = 0;
        foreach (var element in map) count += element.Value;
        return count;
    }

    public List<ServerStatistic> GetServerPopularity() {
        List<ServerStatistic> serverStatistics = new();
        foreach (var s in servers) serverStatistics.Add(new(s.Key, ((float) s.Value) / ((float) CountElements(servers))));
        return serverStatistics;
    }


    public TimeSpan GetPageAverageAge() {
        TimeSpan accumulator = new TimeSpan();
        foreach (TimeSpan timeSpan in ages) accumulator += timeSpan;
        return accumulator.Divide(ages.Count);
    }

    public TimeSpan GetCookieAverageAge() {
        TimeSpan accumulator = new TimeSpan();
        foreach (TimeSpan timeSpan in cookieMaxAge) accumulator += timeSpan;
        return accumulator.Divide(cookieMaxAge.Count);
    }

    public TimeSpan GetPageStandardDeviation(){
            double averageTicks = ages.Average(t => t.Ticks);
            double variance = ages.Average(t => (t.Ticks - averageTicks) * (t.Ticks - averageTicks));
            return new TimeSpan((long) Math.Sqrt(variance));
    }

    public float GetTimeOutRate() {
        return (float) timeoutUrl.Count / (float) siteCount;
    }

    public List<StatueCodeStatistic> GetStatueCodeStatistics() {
        List<StatueCodeStatistic> statueCodeStatistic = new();
        foreach (var c in statusCodes) statueCodeStatistic.Add(new(c.Key, ((float) c.Value) / ((float) CountElements(statusCodes))));
        return statueCodeStatistic;
    }
}