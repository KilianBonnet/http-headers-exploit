using System.Net;
using System.Net.Http.Headers;

namespace http_headers_exploit;

public class Statistics
{
    private int siteCount = 0;
    
    // HTTP Response
    private readonly Dictionary<Version, int> versions;
    private readonly Dictionary<HttpStatusCode, int> statusCodes;
    private readonly Dictionary<string, int> servers;


    public Statistics()
    {
        versions = new Dictionary<Version, int>();
        statusCodes = new Dictionary<HttpStatusCode, int>();
        servers = new Dictionary<string, int>();
    }

    public void AddStatistic(HttpResponseMessage response)
    {
        AddToMap(versions, response.Version);               // Adding HTTP version
        AddToMap(statusCodes, response.StatusCode);         // Adding HTTP status code
        HttpResponseHeaders headers = response.Headers;     // Retiring HTTP headers

        if(headers.Server.ToString() != "")
            AddToMap(servers, headers.Server.ToString());   // Adding Server

        siteCount++;
    }
    
    private void AddToMap<T>(Dictionary<T, int> map, T element) where T : notnull
    {
        if (map.ContainsKey(element)) map[element] += 1;
        else map[element] = 1;
    }

    public override string ToString()
    {
        string message = $"Sites scanned : {siteCount}\n";
        message += "----- HTTP Versions -----\n";
        foreach (var v in versions) message += $"{v.Key} used {v.Value} times\n";

        message += "----- HTTP Status Codes -----\n";
        foreach (var sc in statusCodes) message += $"{sc.Key} used {sc.Value} times\n";

        message += "----- Server information-----\n";
        foreach (var s in servers) message += $"{s.Key} used {s.Value} times\n";

        return message;
    }

}