using System.Net;
using System.Net.Http.Headers;

namespace http_headers_exploit;

public class Statistics
{
    private int siteCount = 0;

    // Mandatory requirements
    private readonly Dictionary<string, int> servers;               // Question 1 : Web server
    private readonly List<TimeSpan> ages;                           // Question 2 : Page Age

    // Other statistics
    private readonly Dictionary<HttpStatusCode, int> statusCodes;
    private readonly HashSet<string> timeoutUrl;


    public Statistics() {
        statusCodes = new Dictionary<HttpStatusCode, int>();
        servers = new Dictionary<string, int>();
        timeoutUrl = new HashSet<string>();
        ages = new List<TimeSpan>();
    }

    public void AddStatistic(HttpResponseMessage response) {
        AddToMap(statusCodes, response.StatusCode);             // Adding HTTP status code
        HttpResponseHeaders headers = response.Headers;         // Retiring HTTP headers

        // Mandatory requirements
        if(headers.Age.HasValue) ages.Add(headers.Age.Value);   // Adding Age
        if(headers.Server.ToString() != "") 
            AddToMap(servers, headers.Server.ToString());       // Adding Server

        siteCount++;
    }

    internal void AddTimeout(string url)
    {
        timeoutUrl.Add(url);
        siteCount++;
    }
    
    private void AddToMap<T>(Dictionary<T, int> map, T element) where T : notnull
    {
        if (map.ContainsKey(element)) map[element] += 1;
        else map[element] = 1;
    }


    private TimeSpan GetPageAverageAge() {
        TimeSpan accumulator = new TimeSpan();
        foreach (TimeSpan timeSpan in ages) accumulator += timeSpan;
        return accumulator.Divide(ages.Count);
    }

    private TimeSpan GetPageStandardDeviation(){
        return ages.Max() - ages.Min();
    }


    public override string ToString() {
        string message = $"Sites scanned : {siteCount}\n";

        message += "----- HTTP Status Codes -----\n";
        foreach (var sc in statusCodes) message += $"{sc.Key} used {sc.Value} times\n";

        message += "----- Server information -----\n";
        foreach (var s in servers) message += $"{s.Key} used {s.Value} times\n";

        message += "----- Page Average Age -----\n";
        message += GetPageAverageAge() + "\n";

        message += "----- Page Standard Deviation -----\n";
        message += GetPageStandardDeviation() + "\n";

        message += "----- Timeout -----\n";
        message += timeoutUrl.Count + "\n";

        return message;
    }


}